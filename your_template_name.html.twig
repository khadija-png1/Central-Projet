{% extends 'base_user_dashboard.html.twig' %}

{% block title %}Kanban Board - Homepage Design{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<style>
body {
    background-color: #f8f9fa;
    min-height: 100vh;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}
.kanban-board-container {
    padding-top: 20px;
    padding-bottom: 20px;
}
.kanban-board {
    display: flex;
    overflow-x: auto;
    padding: 20px 5px; /* Adjusted padding for better edge spacing */
    gap: 20px;
}
.kanban-column {
    min-width: 300px;
    max-width: 320px;
    flex: 1 0 300px;
    background-color: #ebecf0;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    display: flex;
    flex-direction: column; /* Ensures add task form stays at bottom */
}
.kanban-column h4 {
    margin-bottom: 20px;
    padding: 12px 15px;
    text-align: center;
    background-color: #007bff;
    color: white;
    border-radius: 8px;
    font-size: 1.05rem;
    font-weight: 600;
}
.tasks { /* This is the drop zone */
    min-height: 200px;
    padding-bottom: 10px;
    flex-grow: 1; /* Allows tasks area to fill available space */
    border-radius: 5px;
    transition: background-color 0.2s ease; /* Smooth transition for drag-over */
}

/* Visual feedback for when dragging over a droppable column */
.tasks.drag-over {
    background-color: #d6eaff; /* Light blue highlight */
    outline: 2px dashed #007bff;
    outline-offset: -2px;
}

.task-card { /* This is the draggable item */
    background-color: white;
    border-radius: 8px;
    padding: 10px 12px;
    margin-bottom: 12px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    cursor: grab; /* Indicates draggable */
    transition: box-shadow 0.2s ease, transform 0.2s ease;
    border-left-width: 5px;
    border-left-style: solid;
    /* border-left-color dynamically set by .priority-X classes */
}
.task-card:hover {
    box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}
.task-card.dragging { /* Style for the card being actively dragged */
    opacity: 0.6;
    transform: rotate(2deg) translateY(-2px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
}

/* Task Card Internal Layout using Flexbox for better alignment */
.task-card-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start; /* Align items to the top of the card */
    gap: 8px;
}
.task-card-main-info {
    flex-grow: 1; /* Allows text content to take available space */
}

/* Refined Priority Styling */
.task-priority-text {
    font-size: 0.75em;
    font-weight: 700;
    display: block;
    margin-bottom: 5px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}
.task-priority-text.priority-low { color: #28a745; }
.task-priority-text.priority-medium { color: #ffc107; }
.task-priority-text.priority-high { color: #dc3545; }

/* Card border colors based on priority */
.task-card.priority-low { border-left-color: #28a745; }
.task-card.priority-medium { border-left-color: #ffc107; }
.task-card.priority-high { border-left-color: #dc3545; }

.task-title {
    font-size: 0.9rem;
    color: #333;
    line-height: 1.3;
    word-break: break-word; /* Prevents long words from breaking layout */
}
.delete-task {
    flex-shrink: 0; /* Prevents button from shrinking if text is long */
    padding: 3px 7px;
    font-size: 0.8em;
    line-height: 1;
}
.add-task-form {
    margin-top: auto; /* Pushes form to the bottom of the column */
    padding-top: 15px;
    border-top: 1px solid #d1d5db;
}
.add-task-form input, .add-task-form select {
    margin-bottom: 10px;
}
.kanban-board::-webkit-scrollbar { height: 12px; }
.kanban-board::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
.kanban-board::-webkit-scrollbar-thumb { background: #007bff; border-radius: 10px; }
.kanban-board::-webkit-scrollbar-thumb:hover { background: #0056b3; }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid kanban-board-container">
    <h1 class="text-center mb-4">Homepage Design Kanban Board</h1>

    <div class="kanban-board">
        <!-- Task Readiness Column -->
        <div class="kanban-column" id="task-readiness-column">
            <h4>Task Readiness</h4>
            <div class="tasks" data-status="task-readiness"></div>
            <div class="add-task-form">
                <input type="text" class="form-control" placeholder="New task title">
                <select class="form-select">
                    <option value="low">Low</option>
                    <option value="medium" selected>Medium</option>
                    <option value="high">High</option>
                </select>
                <button class="btn btn-success btn-sm w-100" data-status="task-readiness">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
        </div>

        <!-- Work In Progress Column -->
        <div class="kanban-column" id="work-in-progress-column">
            <h4>Work In Progress</h4>
            <div class="tasks" data-status="work-in-progress"></div>
            <div class="add-task-form">
                <input type="text" class="form-control" placeholder="New task title">
                <select class="form-select">
                    <option value="low">Low</option>
                    <option value="medium" selected>Medium</option>
                    <option value="high">High</option>
                </select>
                <button class="btn btn-success btn-sm w-100" data-status="work-in-progress">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
        </div>

        <!-- Review Needed Column -->
        <div class="kanban-column" id="review-needed-column">
            <h4>Review Needed</h4>
            <div class="tasks" data-status="review-needed"></div>
            <div class="add-task-form">
                <input type="text" class="form-control" placeholder="New task title">
                <select class="form-select">
                    <option value="low">Low</option>
                    <option value="medium" selected>Medium</option>
                    <option value="high">High</option>
                </select>
                <button class="btn btn-success btn-sm w-100" data-status="review-needed">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
        </div>

        <!-- Completed Tasks Column -->
        <div class="kanban-column" id="completed-tasks-column">
            <h4>Completed Tasks</h4>
            <div class="tasks" data-status="completed-tasks"></div>
            <div class="add-task-form">
                <input type="text" class="form-control" placeholder="New task title">
                <select class="form-select">
                    <option value="low">Low</option>
                    <option value="medium" selected>Medium</option>
                    <option value="high">High</option>
                </select>
                <button class="btn btn-success btn-sm w-100" data-status="completed-tasks">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', () => {
    const initialTasks = [ // Default tasks if localStorage is empty or invalid
        { id: 1, title: "Define homepage layout and key sections", priority: "high", status: "task-readiness" },
        { id: 2, title: "Select primary and secondary color palette", priority: "medium", status: "task-readiness" },
        { id: 3, title: "Design hero section mockups (3 variants)", priority: "high", status: "work-in-progress" },
        { id: 4, title: "Develop responsive navigation bar component", priority: "medium", status: "work-in-progress" },
        { id: 5, title: "Create detailed wireframes for all content sections", priority: "low", status: "review-needed" },
        { id: 6, title: "Finalize typography choices and font pairings", priority: "medium", status: "completed-tasks" },
    ];

    let tasks; // This will hold our array of task objects
    try {
        const storedTasks = localStorage.getItem('kanbanTasks');
        tasks = storedTasks ? JSON.parse(storedTasks) : initialTasks;
        if (!Array.isArray(tasks)) { // Basic validation for localStorage data
            console.warn("Invalid data in localStorage for kanbanTasks, resetting to initial tasks.");
            tasks = [...initialTasks]; // Use a copy to avoid modifying initialTasks directly
        }
    } catch (error) {
        console.error("Error parsing tasks from localStorage, resetting to initial tasks:", error);
        tasks = [...initialTasks];
    }

    let draggedItem = null; // To store the task object being dragged

    function saveTasks() { // Helper to save current tasks to localStorage
        localStorage.setItem('kanbanTasks', JSON.stringify(tasks));
    }

    function createTaskCard(task) {
        const card = document.createElement('div');
        card.classList.add('task-card', `priority-${task.priority}`);
        card.setAttribute('draggable', true);
        card.setAttribute('data-id', String(task.id)); // Store task ID on the element
        
        card.innerHTML = `
            <div class="task-card-content">
                <div class="task-card-main-info">
                    <div class="task-priority-text priority-${task.priority}">${task.priority}</div>
                    <div class="task-title">${task.title}</div>
                </div>
                <button class="btn btn-sm btn-outline-danger delete-task" data-id="${task.id}" title="Delete task">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </div>
        `;

        // --- DRAGSTART: When dragging of a task card begins ---
        card.addEventListener('dragstart', (e) => {
            draggedItem = task; // Store the actual task object
            e.dataTransfer.setData('text/plain', String(task.id)); // Set data for the drag operation
            e.dataTransfer.effectAllowed = 'move'; // Indicate that the item will be moved
            setTimeout(() => { // Use timeout to ensure drag image is created before class is added
                e.target.classList.add('dragging');
            }, 0);
        });

        // --- DRAGEND: When dragging of a task card ends (after drop or cancellation) ---
        card.addEventListener('dragend', (e) => {
            e.target.classList.remove('dragging');
            // If the drag was cancelled (e.g., user pressed Esc, or dropped outside a valid target)
            // and not successfully dropped, clear draggedItem.
            // A successful drop will clear draggedItem in its own handler.
            if (draggedItem && e.dataTransfer.dropEffect === 'none') {
                draggedItem = null;
            }
        });

        // Delete task functionality
        card.querySelector('.delete-task').addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent card's dragstart event
            const taskIdToDelete = parseInt(e.currentTarget.getAttribute('data-id'));
            tasks = tasks.filter(t => t.id !== taskIdToDelete); // Remove task from array
            saveTasks(); // Update localStorage
            renderTasks(); // Re-render the board
        });
        return card;
    }

    function renderTasks() { // Function to draw all tasks onto the board
        document.querySelectorAll('.tasks').forEach(columnElement => {
            const status = columnElement.dataset.status;
            columnElement.innerHTML = ''; // Clear current tasks in the column
            tasks.filter(task => task.status === status)
                 .sort((a, b) => { // Optional: Sort tasks (e.g., by priority then ID)
                     const priorityOrder = { high: 1, medium: 2, low: 3 };
                     return priorityOrder[a.priority] - priorityOrder[b.priority] || a.id - b.id;
                 })
                 .forEach(task => {
                    columnElement.appendChild(createTaskCard(task));
                 });
        });
    }

    // --- Event listeners for the COLUMNS (drop zones) ---
    document.querySelectorAll('.tasks').forEach(columnElement => {
        // --- DRAGOVER: When a dragged item is over a column ---
        columnElement.addEventListener('dragover', (e) => {
            e.preventDefault(); // THIS IS CRUCIAL to allow a drop
            e.dataTransfer.dropEffect = 'move'; // Visual cue for the type of drop
            columnElement.classList.add('drag-over'); // Add class for visual feedback
        });

        // --- DRAGLEAVE: When a dragged item leaves a column ---
        columnElement.addEventListener('dragleave', (e) => {
            // Check if the mouse is truly leaving the column or just moving over a child element
            if (e.relatedTarget && !columnElement.contains(e.relatedTarget)) {
                 columnElement.classList.remove('drag-over');
            } else if (!e.relatedTarget) { // Mouse left the browser window or to a non-browser element
                 columnElement.classList.remove('drag-over');
            }
        });

        // --- DROP: When a dragged item is dropped onto a column ---
        columnElement.addEventListener('drop', (e) => {
            e.preventDefault(); // Also crucial for the drop to be processed
            columnElement.classList.remove('drag-over'); // Remove visual feedback
            if (draggedItem) { // Check if there's an item being dragged
                const targetStatus = columnElement.dataset.status; // Get the status of the target column
                if (draggedItem.status !== targetStatus) { // Only update if status actually changed
                    draggedItem.status = targetStatus; // Update the task's status
                    saveTasks(); // Save changes to localStorage
                }
                renderTasks(); // Re-render the entire board to reflect the change
                draggedItem = null; // Clear the draggedItem after successful drop and processing
            }
        });
    });

    // Add new tasks functionality
    document.querySelectorAll('.add-task-form button').forEach(button => {
        button.addEventListener('click', (e) => {
            const form = e.target.closest('.add-task-form');
            const titleInput = form.querySelector('input[type="text"]');
            const prioritySelect = form.querySelector('select');
            
            const title = titleInput.value.trim();
            const priority = prioritySelect.value;
            const status = e.target.getAttribute('data-status');

            if (title) {
                const newTask = { 
                    id: Date.now(), // Simple unique ID
                    title, 
                    priority, 
                    status 
                };
                tasks.push(newTask);
                saveTasks();
                renderTasks();
                titleInput.value = ''; // Clear form
                prioritySelect.value = 'medium'; // Reset priority
            } else {
                alert('Task title cannot be empty.');
            }
        });
    });
    
    renderTasks(); // Initial render of tasks when the page loads
});
</script>
{% endblock %}
