{% extends 'base_user_dashboard.html.twig' %}

{% block title %}TABLEAU DE BOARD {% endblock %}

{% block stylesheets %}
    {{ parent() }}
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
        <style>
                body {
                    background-color: #f8f9fa;
                    min-height: 100vh;
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                }
                .kanban-board-container {
                    padding-top: 20px;
                    padding-bottom: 20px;
                }
                .kanban-board {
                    display: flex;
                    overflow-x: auto;
                    padding: 20px 5px;
                    gap: 20px;
                }
                .kanban-column {
                    min-width: 300px;
                    max-width: 320px;
                    flex: 1 0 300px;
                    background-color: #ebecf0;
                    border-radius: 10px;
                    padding: 15px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                    display: flex;
                    flex-direction: column;
                }
                .kanban-column h4 {
                    margin-bottom: 20px;
                    padding: 12px 15px;
                    text-align: center;
                    background-color: #007bff;
                    color: white;
                    border-radius: 8px;
                    font-size: 1.05rem;
                    font-weight: 600;
                }
                .tasks {
                    min-height: 200px;
                    padding-bottom: 10px;
                    flex-grow: 1;
                    border-radius: 5px;
                    transition: background-color 0.2s ease;
                }
                .tasks.drag-over {
                    background-color: #d6eaff;
                    outline: 2px dashed #007bff;
                    outline-offset: -2px;
                }
                .task-card {
                    background-color: white;
                    border-radius: 8px;
                    padding: 10px 12px;
                    margin-bottom: 12px;
                    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                    cursor: grab;
                    transition: box-shadow 0.2s ease, transform 0.2s ease;
                    border-left-width: 5px;
                    border-left-style: solid;
                }
                .task-card:hover {
                    box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15);
                    transform: translateY(-2px);
                }
                .task-card.dragging {
                    opacity: 0.6;
                    transform: rotate(2deg) translateY(-2px);
                    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                }
                .task-card-content {
                    display: flex;
                    justify-content: space-between;
                    align-items: flex-start;
                    gap: 8px;
                }
                .task-card-main-info {
                    flex-grow: 1;
                }
                .task-priority-text {
                    font-size: 0.75em;
                    font-weight: 700;
                    display: block;
                    margin-bottom: 5px;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                .task-priority-text.priority-low { color: #28a745; }
                .task-priority-text.priority-medium { color: #ffc107; }
                .task-priority-text.priority-high { color: #dc3545; }
                .task-card.priority-low { border-left-color: #28a745; }
                .task-card.priority-medium { border-left-color: #ffc107; }
                .task-card.priority-high { border-left-color: #dc3545; }
                .task-title {
                    font-size: 0.9rem;
                    color: #333;
                    line-height: 1.3;
                    word-break: break-word;
                }
                .delete-task {
                    flex-shrink: 0;
                    padding: 3px 7px;
                    font-size: 0.8em;
                    line-height: 1;
                }
                .add-task-form {
                    margin-top: auto;
                    padding-top: 15px;
                    border-top: 1px solid #d1d5db;
                }
                .add-task-form input, .add-task-form select { /* General style for both input and select */
                    margin-bottom: 10px;
                }

                /* --- Custom Styling for .form-select --- */
                .add-task-form .form-select {
                    background-color: #fff; /* White background */
                    border: 1px solid #ced4da; /* Standard Bootstrap border color */
                    border-radius: 0.375rem; /* Bootstrap's default border-radius */
                    padding: 0.375rem 2.25rem 0.375rem 0.75rem; /* Bootstrap's padding, adjust if needed */
                    font-size: 0.9rem; /* Slightly smaller font size */
                    color: #495057; /* Standard text color */
                    line-height: 1.5;
                    appearance: none; /* Remove default system appearance */
                    -webkit-appearance: none;
                    -moz-appearance: none;
                    /* Custom arrow using background SVG - more robust than unicode characters */
                    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e");
                    background-repeat: no-repeat;
                    background-position: right 0.75rem center;
                    background-size: 16px 12px;
                    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
                }

                .add-task-form .form-select:focus {
                    border-color: #86b7fe; /* Bootstrap's focus blue */
                    outline: 0;
                    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25); /* Bootstrap's focus shadow */
                }

                /* Optional: Style for when the select is disabled */
                .add-task-form .form-select:disabled {
                    background-color: #e9ecef;
                    opacity: 1;
                }
                /* --- End Custom Styling for .form-select --- */

                .kanban-board::-webkit-scrollbar { height: 12px; }
                .kanban-board::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
                .kanban-board::-webkit-scrollbar-thumb { background: #007bff; border-radius: 10px; }
                .kanban-board::-webkit-scrollbar-thumb:hover { background: #0056b3; }
        </style>
{% endblock %}

{% block body %}
    {# ... your existing body block ... #}
    <div class="content-wrapper" >
        <div class="row">
            <div class="col-lg-12 grid-margin grid-margin-lg-0 stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="container-fluid kanban-board-container " >
                                <h1 class="text-center mb-4">TABLEAU DE BOARD PROJETS</h1>

                                <div class="kanban-board "  >
                                    <!-- Task Readiness Column -->
                                    <div class="kanban-column" id="task-readiness-column">
                                        <h4>A faire </h4>
                                        <div class="tasks" data-status="task-readiness"></div>
                                        <div class="add-task-form">
                                            <input type="text" class="form-control" placeholder="Nouveau titre de tâche">

                                            <select class="form-select"> {# This will be styled #}
                                                <option value="low">Faible</option>
                                                <option value="medium" selected>Moyenne</option>
                                                <option value="high">Élevée</option>
                                            </select>
                                            <button class="btn btn-success btn-sm w-100" data-status="task-readiness">
                                                <i class="fas fa-plus"></i> Ajout Tâche
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Work In Progress Column -->
                                    <div class="kanban-column" id="work-in-progress-column">
                                        <h4>En cours </h4>
                                        <div class="tasks" data-status="work-in-progress"></div>
                                        <div class="add-task-form">
                                            <input type="text" class="form-control" placeholder="Nouveau titre de tâche">
                                            <select class="form-select"> {# This will be styled #}
                                                <option value="low">Faible</option>
                                                <option value="medium" selected>Moyenne</option>
                                                <option value="high">Élevée</option>
                                            </select>
                                            <button class="btn btn-success btn-sm w-100" data-status="work-in-progress">
                                                <i class="fas fa-plus"></i>  Ajout Tâche
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Review Needed Column -->
                                    <div class="kanban-column" id="review-needed-column">
                                        <h4>A REVOIR</h4>
                                        <div class="tasks" data-status="review-needed"></div>
                                        <div class="add-task-form">
                                            <input type="text" class="form-control" placeholder="Nouveau titre de tâche">
                                            <select class="form-select"> {# This will be styled #}
                                                <option value="low">Faible</option>
                                                <option value="medium" selected>Moyenne</option>
                                                <option value="high">Élevée</option>
                                            </select>
                                            <button class="btn btn-success btn-sm w-100" data-status="review-needed">
                                                <i class="fas fa-plus"></i> Ajout Tâche
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Completed Tasks Column -->
                                    <div class="kanban-column" id="completed-tasks-column">
                                        <h4>Terminé </h4>
                                        <div class="tasks" data-status="completed-tasks"></div>
                                        <div class="add-task-form">
                                            <input type="text" class="form-control" placeholder="Nouveau titre de tâche">
                                            <select class="form-select"> {# This will be styled #}
                                                <option value="faible">Faible</option>
                                                <option value="medium" selected>Moyenne</option>
                                                <option value="élevée">Élevée</option>
                                            </select>
                                            <button class="btn btn-success btn-sm w-100" data-status="completed-tasks">
                                                <i class="fas fa-plus"></i> Ajout Tâche
                                            </button>
                                        </div>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <!-- Modal de détail de tâche -->
    <div class="modal fade" id="taskDetailModal" tabindex="-1" aria-labelledby="taskDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="taskDetailModalLabel">Détail de la tâche</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer">&times;</button>
        </div>
        <div class="modal-body">
            <p><strong>Titre :</strong> <span id="modal-task-title"></span></p>
            <p><strong>Priorité :</strong> <span id="modal-task-priority"></span></p>
            <p><strong>Statut :</strong> <span id="modal-task-status"></span></p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
        </div>
        </div>
    </div>
    </div>

{% endblock %}

{% block scripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // On récupère les tâches dans localStorage s'il y en a, sinon tableau vide
            let tasks = JSON.parse(localStorage.getItem('kanbanTasks')) || [          
];


            let draggedItem = null;

            function saveTasks() {
                localStorage.setItem('kanbanTasks', JSON.stringify(tasks));
            }

            function createTaskCard(task) {
                const card = document.createElement('div');
                card.classList.add('task-card', `priority-${task.priority}`);
                card.setAttribute('draggable', true);
                card.dataset.id = task.id;

                card.innerHTML = `
                    <div class="task-card-content">
                        <div class="task-card-main-info">
                            <div class="task-priority-text priority-${task.priority}">${task.priority}</div>
                            <div class="task-title">${task.title}</div>
                        </div>
                        <button class="btn btn-sm btn-outline-danger delete-task" data-id="${task.id}" title="Supprimer tâche">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                `;

                card.addEventListener('dragstart', (e) => {
                    window.draggedItem = task;
                    e.dataTransfer.setData('text/plain', task.id);
                    e.dataTransfer.effectAllowed = 'move';
                    setTimeout(() => {
                        card.classList.add('dragging');
                    }, 0);
                });

                card.addEventListener('dragend', (e) => {
                    card.classList.remove('dragging');
                    if (window.draggedItem && e.dataTransfer.dropEffect === 'none') {
                        window.draggedItem = null;
                    }
                });

                card.querySelector('.delete-task').addEventListener('click', (e) => {
                    e.stopPropagation();
                    const taskIdToDelete = parseInt(e.currentTarget.dataset.id);
                    tasks = tasks.filter(t => t.id !== taskIdToDelete);
                    saveTasks();
                    renderTasks();
                });

                card.addEventListener('click', () => {
                    document.getElementById('modal-task-title').textContent = task.title;
                    document.getElementById('modal-task-priority').textContent = task.priority;
                    document.getElementById('modal-task-status').textContent = task.status;

                    const modal = new bootstrap.Modal(document.getElementById('taskDetailModal'));
                    modal.show();
                });

                return card;
            }

            function renderTasks() {
                document.querySelectorAll('.tasks').forEach(columnElement => {
                    const status = columnElement.dataset.status;
                    columnElement.innerHTML = '';
                    tasks.filter(task => task.status === status)
                        .sort((a, b) => {
                            const priorityOrder = { "élevée": 1, medium: 2, faible: 3 };
                            return priorityOrder[a.priority] - priorityOrder[b.priority] || a.id - b.id;
                        })
                        .forEach(task => {
                            columnElement.appendChild(createTaskCard(task));
                        });
                });
            }

            document.querySelectorAll('.tasks').forEach(columnElement => {
                columnElement.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'move';
                    columnElement.classList.add('drag-over');
                });

                columnElement.addEventListener('dragleave', (e) => {
                    if (e.relatedTarget && !columnElement.contains(e.relatedTarget)) {
                        columnElement.classList.remove('drag-over');
                    } else if (!e.relatedTarget) {
                        columnElement.classList.remove('drag-over');
                    }
                });

                columnElement.addEventListener('drop', (e) => {
                    e.preventDefault();
                    columnElement.classList.remove('drag-over');
                    if (window.draggedItem) {
                        const targetStatus = columnElement.dataset.status;
                        if (window.draggedItem.status !== targetStatus) {
                            window.draggedItem.status = targetStatus;
                            saveTasks();
                            console.log("hello");
                        }
                        renderTasks();
                        window.draggedItem = null;
                    }
                });
            });

            // Ajout dynamique d'une tâche via formulaire
            document.querySelectorAll('.add-task-form button').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const form = e.target.closest('.add-task-form');
                    const titleInput = form.querySelector('input[type="text"]');
                    const prioritySelect = form.querySelector('select');
                    const status = e.target.getAttribute('data-status');

                    const title = titleInput.value.trim();
                    const priority = prioritySelect.value;

                    if (title) {
                        const newTask = {
                            id: Date.now(),
                            title,
                            priority,
                            status
                        };
                        tasks.push(newTask);
                        saveTasks();
                        renderTasks();
                        titleInput.value = '';
                        prioritySelect.value = 'medium';
                    } else {
                        alert('Le titre de la tâche ne peut pas être vide.');
                    }
                });
            });

            // Affiche les tâches existantes (initialement, il n’y aura rien si localStorage est vide)
            renderTasks();
        });
    </script>
{% endblock %}
